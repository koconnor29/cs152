type token =
  | INT of (int)
  | VAR of (string)
  | PLUS
  | MINUS
  | TIMES
  | EOF
  | LPAREN
  | RPAREN
  | TRUE
  | FALSE
  | EQUALS
  | LESS
  | LESSEQ
  | NOT
  | AND
  | OR
  | SKIP
  | ASSIGN
  | SEMI
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | LBRACE
  | RBRACE

open Parsing;;
# 1 "parser.mly"

  open Ast
  open Printf

  open Lexing
# 37 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
    0 (* EOF *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* EQUALS *);
  267 (* LESS *);
  268 (* LESSEQ *);
  269 (* NOT *);
  270 (* AND *);
  271 (* OR *);
  272 (* SKIP *);
  273 (* ASSIGN *);
  274 (* SEMI *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* WHILE *);
  279 (* DO *);
  280 (* LBRACE *);
  281 (* RBRACE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\001\000\001\000\001\000\
\001\000\004\000\000\000"

let yylen = "\002\000\
\001\000\001\000\003\000\003\000\003\000\003\000\001\000\001\000\
\003\000\003\000\003\000\003\000\001\000\003\000\003\000\012\000\
\008\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\000\000\001\000\002\000\000\000\000\000\
\000\000\007\000\008\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\005\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\016\000"

let yydgoto = "\002\000\
\007\000\020\000\021\000\008\000"

let yysindex = "\004\000\
\013\255\000\000\242\254\000\000\002\255\037\255\032\255\000\000\
\051\255\022\255\022\255\013\255\000\000\000\000\051\255\014\255\
\022\255\000\000\000\000\044\255\054\255\056\255\000\000\055\255\
\051\255\051\255\051\255\034\255\057\255\051\255\051\255\051\255\
\031\255\042\255\000\000\061\255\061\255\000\000\000\000\014\255\
\014\255\014\255\043\255\045\255\013\255\013\255\244\254\245\254\
\047\255\000\000\046\255\013\255\247\254\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\011\000\000\000\000\000\065\255\
\066\255\067\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\244\255\251\255\025\000\000\000"

let yytablesize = 292
let yytable = "\023\000\
\003\000\014\000\009\000\016\000\001\000\012\000\012\000\010\000\
\012\000\024\000\004\000\028\000\049\000\050\000\003\000\054\000\
\025\000\026\000\027\000\036\000\037\000\038\000\013\000\014\000\
\040\000\041\000\042\000\017\000\004\000\018\000\019\000\005\000\
\047\000\048\000\006\000\022\000\025\000\026\000\027\000\053\000\
\035\000\029\000\011\000\030\000\031\000\032\000\025\000\026\000\
\027\000\012\000\043\000\013\000\014\000\030\000\031\000\032\000\
\015\000\025\000\026\000\027\000\033\000\035\000\034\000\039\000\
\044\000\027\000\045\000\051\000\046\000\052\000\018\000\009\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\003\000\000\000\000\000\003\000\
\000\000\000\000\003\000\003\000\003\000\004\000\004\000\000\000\
\000\000\004\000\003\000\014\000\004\000\004\000\004\000\000\000\
\000\000\003\000\014\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000"

let yycheck = "\012\000\
\000\000\000\000\017\001\009\000\001\000\018\001\018\001\006\001\
\018\001\015\000\000\000\017\000\025\001\025\001\002\001\025\001\
\003\001\004\001\005\001\025\000\026\000\027\000\001\001\002\001\
\030\000\031\000\032\000\006\001\016\001\008\001\009\001\019\001\
\045\000\046\000\022\001\011\000\003\001\004\001\005\001\052\000\
\007\001\017\000\006\001\010\001\011\001\012\001\003\001\004\001\
\005\001\018\001\020\001\001\001\002\001\010\001\011\001\012\001\
\006\001\003\001\004\001\005\001\007\001\007\001\007\001\007\001\
\023\001\005\001\024\001\021\001\024\001\024\001\000\000\007\001\
\007\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\007\001\
\255\255\255\255\010\001\011\001\012\001\003\001\004\001\255\255\
\255\255\007\001\018\001\018\001\010\001\011\001\012\001\255\255\
\255\255\025\001\025\001\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  TRUE\000\
  FALSE\000\
  EQUALS\000\
  LESS\000\
  LESSEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  SKIP\000\
  ASSIGN\000\
  SEMI\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  LBRACE\000\
  RBRACE\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 30 "parser.mly"
                     ( Int _1 )
# 231 "parser.ml"
               : aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
                     ( Var _1 )
# 238 "parser.ml"
               : aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 32 "parser.mly"
                     ( Plus(_1, _3) )
# 246 "parser.ml"
               : aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 33 "parser.mly"
                     ( Minus(_1, _3) )
# 254 "parser.ml"
               : aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 34 "parser.mly"
                     ( Times(_1, _3) )
# 262 "parser.ml"
               : aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : aexp) in
    Obj.repr(
# 35 "parser.mly"
                     ( _2 )
# 269 "parser.ml"
               : aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parser.mly"
                     ( True )
# 275 "parser.ml"
               : bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                     ( False )
# 281 "parser.ml"
               : bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 39 "parser.mly"
                     ( Equals(_1, _3) )
# 289 "parser.ml"
               : bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 40 "parser.mly"
                     ( Less(_1, _3) )
# 297 "parser.ml"
               : bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 41 "parser.mly"
                     ( LessEq(_1, _3) )
# 305 "parser.ml"
               : bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : bexp) in
    Obj.repr(
# 42 "parser.mly"
                     ( _2 )
# 312 "parser.ml"
               : bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                     ( Skip )
# 318 "parser.ml"
               : com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : aexp) in
    Obj.repr(
# 45 "parser.mly"
                     ( Assign(_1, _3) )
# 326 "parser.ml"
               : com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : com) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : com) in
    Obj.repr(
# 46 "parser.mly"
                     ( Seq(_1, _3) )
# 334 "parser.ml"
               : com))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : bexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : com) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : com) in
    Obj.repr(
# 48 "parser.mly"
                     ( If(_3, _7, _11) )
# 343 "parser.ml"
               : com))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : bexp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : com) in
    Obj.repr(
# 50 "parser.mly"
                     ( While(_3, _7) )
# 351 "parser.ml"
               : com))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : com) in
    Obj.repr(
# 52 "parser.mly"
                     ( _1 )
# 358 "parser.ml"
               : Ast.com))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.com)
